name: release

on:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  BRANCH_MAIN: main
  BRANCH_DEVELOP: develop
  TAG_PREFIX: v

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # only merge pull requests that begin with 'release/' or 'hotfix/'
    if: github.event.pull_request.merged == true &&
      (startsWith(github.head_ref, 'release/') || startsWith(github.head_ref, 'hotfix/'))

    steps:
      - name: Set GitHub token
        run: |
          echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ env.GH_TOKEN }}

      - name: Extract version from release branch
        if: startsWith(github.head_ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from hotfix branch
        if: startsWith(github.head_ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create release
        env:
          RELEASE_TAG: "${{ env.TAG_PREFIX }}${{ env.RELEASE_VERSION }}"
        run: |
          gh release create \
            ${{ env.RELEASE_TAG }} \
            --target ${{ github.event.pull_request.merge_commit_sha }} \
            --title "${{ env.RELEASE_TAG }}" \
            --generate-notes

      - name: Create merge PR ${{ github.head_ref }} -> ${{ env.BRANCH_DEVELOP }}
        env:
          PR_TITLE: Merge branch '${{ github.head_ref }}' into ${{ env.BRANCH_DEVELOP }}
          PR_BODY: |
            This PR merges the ${{ github.head_ref }} branch back into ${{ env.BRANCH_DEVELOP }} branch.
            This happens to ensure that the updates that happened on the ${{ github.head_ref }} branch, i.e. CHANGELOG and manifest updates are also present on the ${{ env.BRANCH_DEVELOP }} branch.
          PR_LABEL: automated-pr
        run: |
          gh label create ${{ env.PR_LABEL }} --force
          gh pr create \
            --base ${{ env.BRANCH_DEVELOP }} \
            --head ${{ github.head_ref }} \
            --title "${{ env.PR_TITLE }}" \
            --body "${{ env.PR_BODY }}" \
            --label "${{ env.PR_LABEL }}" \
            --fill
